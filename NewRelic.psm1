#---------------------------------------------------------------------------------
# Module NewRelic.ps1
#---------------------------------------------------------------------------------

Function Get-NRServer {

<#
    .Synopsis
        Gets Server info from New Relic

    .Description
        Using New Relic's API, this cmdlet reaches out to the website and returns server base information.  Can return all server info or only the specified server info

    .Parameter ComputerName
        Name of the servers to return information.  Default is Null so it will return all

    .Parameter APIKey
        API key generated by your account at New Relic.

    .Example
        Get-NRServer -ComputerName 'ServerA','ServerB'
        'ServerA','ServerB' | Get-NRServer   

        Each line retrieves the same info about Server A and Server B

    .Link
        https://docs.newrelic.com/docs/apis/rest-api-v2/server-examples-v2/listing-your-server-id-metric-data-v2

    .Note
        Author: Jeff Buenting
        Date: 13 OCT 2015
#>

    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline=$True)]
        [String[]]$ComputerName,

        [Parameter(Mandatory=$True)]
        [String]$APIKey
    )

    Begin {
        $Url = 'https://api.newrelic.com/v2/servers.xml'
                
        $headers = @{"x-api-key"="$APIkey"}
        $XML = invoke-RestMethod -Uri $url -Header $headers
    }

    Process {
        if ( [String]::IsNullOrEmpty( $ComputerName ) ) {
                Write-Verbose "Returning ALL computer object from New Relic"
                
                
                $XML.servers_response.servers.Server | foreach {
                    Write-Verbose "Found Server: $($_.Name)"
                    $Server = New-Object -TypeName psobject -Property @{
                        ID = $_.ID
                        Name = $_.Name
                        Host = $_.Host
                        HeathStatus = $_.Health_Status
                        Reporting = $_.Reporting
                        LastReportedAt = $_.Last_Reported_At
                    }
                    Write-Verbose "Returning $($Server | Out-String)"
                    Write-Output $Server
                }
            }
            Else {
                Foreach ( $C in $computerName ) {
                    Write-Verbose "Returning only specified computer objects from New Relic: $C"
                    
                    $XML.servers_response.servers.Server | where name -eq $C | foreach {
                        Write-Verbose "Found Server: $($_.Name)"
                        $Server = New-Object -TypeName psobject -Property @{
                            ID = $_.ID
                            Name = $_.Name
                            Host = $_.Host
                            HeathStatus = $_.Health_Status
                            Reporting = $_.Reporting
                            LastReportedAt = $_.Last_Reported_At
                        }
                        Write-Verbose "Returning $($Server | Out-String)"
                        Write-Output $Server
                    }
                }
              
        }
    }
}

#---------------------------------------------------------------------------------

Function Get-NRServerMetricsNames {

<#
    .Synopsis
        Retrieve server metric names from New Relic

    .Links
        https://docs.newrelic.com/docs/apis/rest-api-v2/server-examples-v2/listing-your-server-id-metric-data-v2
#>


 [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline=$True)]
        [PSObject[]]$Server
    )

    Begin {
        $APIkey = "1d62dc25a65b6c4a1cd1347e8db2a12c38843359a2af566"
    }

    Process {
        foreach ( $S in $Server ) {
            Write-Verbose "Retrieving Metrics from $($S.name)"
            $Url = "https://api.newrelic.com/v2/servers/$($S.ID)/metrics.xml"
   
            $headers = @{"x-api-key"="$APIkey"}
            invoke-RestMethod -Uri $url -Header $headers
            #$XML.metrics_response.metrics.metric.name | Write-Output
            
            $XML | Write-Output
        }
    }
}

#---------------------------------------------------------------------------------

Function Get-NRServerCPUCounters {

<#
    .Synopsis
        Retrieves metrics from New Relic.

    .Description
        Using New Relic's API, accesses the servers data and returns the CPU counter information.  Either over the specified time period or for the last 10 minutes.

    .Parameter Server
        Server object obtained from calling Get-NRServer.

    .Parameter APIKey
        API key generated by your account at New Relic

    .parameter From
        Beginning Date/Time range

    .Parameter To
        Ending Date/Time Range

    .Parameter Summarize
        When included only summarized data is returned

    .Example
        Returns the CPU Counter for the past 10 minutes from ServerA.

        Get-NRServer -ComputerName 'ServerA' -APIKey 'xxxxxxxxxx' | Get-NRServerCPUCounters -APIKey 'xxxxxxxxxx'

    .Example

        Returns summarized data between a specific time range from ServerA and ServerB

        Get-NRServer -ComputerName 'ServerA','ServerB' -APIKey 'xxxxxxxxxx' | Get-NRServerCPUCounters -APIKey 'xxxxxxxxxx' -From (Get-Date).AddDays(-10) -To Get-Date -Summarize

    .Links
        Use to build the Body of the query
        https://rpm.newrelic.com/api/explore/api/explore

    .Links
        Curl Syntax.  Used to held translate Curl to Invoke-RestMethod
        http://curl.haxx.se/docs/manpage.html

    .Note
        Author: Jeff Buenting
        Date: 2015 OCT 16
#>

     [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [PSObject[]]$Server,

        [Parameter(Mandatory=$True)]
        [String]$APIKey,
        
        [DateTime]$To = (Get-Date),

        [DateTime]$From = ($TO.AddMinutes(-10)),

        [Switch]$Summarize
    )

    Process {
        foreach ( $S in $Server ) {
            Write-Verbose "Retrieving Metrics from $($S.name)"

            # ----- API Url
            $Url = "https://api.newrelic.com/v2/servers/$($S.ID)/metrics/data.xml"
               
            # ----- Query
            $Body = @{
                "names"="System/CPU/System/percent"
                "summarize"=$Summarize
                "from"=$From.ToString("s")
                "to"=$To.ToString("s")
            }

            $headers = @{"x-api-key"="$APIkey"}
            $XML = invoke-RestMethod -Uri $url -Header $headers -Body $Body 
            $XML.metric_data_response.metric_data.metrics.metric.timeslices.timeslice.values | foreach {
                Write-Verbose "Returning Data: $($_ | Out-String)"

                $Data =  New-object -TypeName psobject -Property @{
                    AverageResponseTime = $_.average_response_time
                    CallsPerMinute = $_.Calls_per_minute
                    CallCount = $_.Call_Count
                    MinResponseTime = $_.Min_response_Time
                    MaxResponseTime = $_.Max_response_Time
                    AverageExclusiveTime = $_.Average_Exlcusive_Time
                    AverageValue = $_.Average_Value
                    TotalCallTimePerMinute = $_.Total_Call_time_per_minute
                    RequestsPerMinute = $_.Requests_Per_Minute
                    StandardDeviation = $_.Standard_Deviation
                }
                    
                Write-Output $Data
            }
        }
    }
}

#---------------------------------------------------------------------------------